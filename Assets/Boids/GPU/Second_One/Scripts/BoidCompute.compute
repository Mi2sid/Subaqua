#pragma kernel CSMain
//Adapate depuis les traveaux de Sebastian Lague (src : https://www.youtube.com/watch?v=bqtqltqcQhw)

struct GPU_BOID
{
    int nbTeammates;

    float3 pos;
    float3 dir;

    float3 vel;

    float3 groupBoss;
    float3 groupMiddle;
    float3 avoid;
  
    float3 alignmentForce;
    float3 cohesionForce;
    float3 seperationForce;
};

RWStructuredBuffer<GPU_BOID> boids;
int sizeListOfBoids;

float maxSpeed;
float maxSteerForce;

float percRay;
float avoidRay;

float temp;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int idBoid = 0; idBoid < sizeListOfBoids; idBoid++) 
    {
        if (id.x != idBoid) 
        {
            GPU_BOID boid = boids[idBoid];

            float3 offset = boid.pos - boids[id.x].pos;

            float dist = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            if (dist < percRay * percRay)
            {
                boids[id.x].nbTeammates += 1;
                boids[id.x].groupMiddle += boid.pos;
                boids[id.x].groupBoss += boid.dir;

                if (dist < avoidRay * avoidRay)
                {
                    boids[id.x].avoid -= offset / dist;
                }
            }
        }

        temp = length(normalize(boids[id.x].groupBoss) * maxSpeed - boids[id.x].vel);
        
        if (temp * temp > maxSteerForce * maxSteerForce)
            boids[id.x].alignmentForce = (normalize(normalize(boids[id.x].groupBoss) * maxSpeed - boids[id.x].vel) * maxSteerForce);
        else boids[id.x].alignmentForce = (normalize(boids[id.x].groupBoss) * maxSpeed - boids[id.x].vel);

        temp = length(normalize((boids[id.x].groupMiddle / boids[id.x].nbTeammates) - boids[id.x].pos) * maxSpeed - boids[id.x].vel);

        if (temp * temp > maxSteerForce * maxSteerForce)
            boids[id.x].cohesionForce = (normalize(normalize((boids[id.x].groupMiddle / boids[id.x].nbTeammates) - boids[id.x].pos) * maxSpeed - boids[id.x].vel) * maxSteerForce);
        else boids[id.x].cohesionForce = (normalize((boids[id.x].groupMiddle / boids[id.x].nbTeammates) - boids[id.x].pos) * maxSpeed - boids[id.x].vel);

        temp = length(normalize(boids[id.x].avoid) * maxSpeed - boids[id.x].vel);

        if (temp * temp > maxSteerForce * maxSteerForce)
            boids[id.x].seperationForce = (normalize(normalize(boids[id.x].avoid) * maxSpeed - boids[id.x].vel) * maxSteerForce);
        else boids[id.x].seperationForce = (normalize(boids[id.x].avoid) * maxSpeed - boids[id.x].vel);
    }
}